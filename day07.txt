기본 자료형

	정수형
	데이터타입	바이트		비트		저장가능 값
	byte		1		8		-2^7~(2^7-1)
	short		2		16		-2^15~(2^15-1)

	int		4		32		-2^31~(2^31-1)
	long		8		64		-2^64~(2^64-1)

	실수형
	float		4		32		1.4*10^-45 ~ 3.4*10^38
	double		8		64	

	문자형
	char		2		16

----------------------------------------------------------------------------------------------

형식을 갖춘 문자열을 가져오는 메소드

String 클래스 안에 있는 format()이라는 메소드
	>사용법은 printf 똑같은데,
		printf() --> 형식을 갖춰서 출력
		foramt() --> 형식을 갖춰서  출력

	format("형식지정자(저정할 형식)", 형식을 지정할 값)
		ex) 23 --> "0023" 
			String.format("%04d",23);

-----------------------------------------------------------------------------------------------

배열(Array) 

	1. 여러개의 데이터(같은 타입의 자료들 끼리만 가능)를 하나의 이름을 사용해서 묶어서 관리할 때 사용

	2.순서가 없는 값에 순서를 부여하기 위해서 사용

배열의 선언과 초기화
	자료형[] 배열명 = {값,값,값, ...};
		-> ex)int[] Array = {1,2,3,4};

배열의 선언
	자료형[] 배열명;
	int[] Array;
	->배열을 선언하는 것은 생성된 배열을 다루기 위한 공간 확보

배열의 생성
	배열명 = new 자료형[];
	ex) array = new int [5];

선언과 생성
	타입[]배열명 = new타입[길이];

초기화 vs 생성
	값을 나중에 대입할 경우에는 크기만 주어서 생성까지만 해주는 것이 효율적
	미리 특정한 값을 넣어놓아야한다면 초기화도 함께 해주는 것이 효율적

---------------------
System.out.println(Scores); - 해당 배열의 저장 주소값이 나옴
[I@262b2c86

[:배열임을 표시
I: int타입의 값들이 들어있다.
@~: 16진수의 메모리 주소

---------------------
인덱스(index) -순서가 있는 경우에만 접근하는 메서드

: 배열의 공간마다  부여된 번호라고 생각

인덱스 연산자: []

배열속의 개별 요소 사용하기
	
	배열명[인덱스 번호]
	ex)Scores[2]

배열의 길이를 초과하면 나오는 에러
java.lang.ArrayIndexOutOfBoundsException 

배열의 길이를 알려주는 키워드
	length
	배열명.length --> 배열의 길이를 int값으로 받아온다.

-------------------------------------------------------------------------------------

배열자체를 문자열로 사용하는 방법
	import java.util.Arrays;

	Arrays.toString(배열명);